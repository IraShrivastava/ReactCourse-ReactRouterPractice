{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/4.6c0b6557.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1Nb9X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2tepe\",\"loading\":\"NewCommentForm_loading__23GOi\",\"control\":\"NewCommentForm_control__3AZsU\",\"actions\":\"NewCommentForm_actions__zX8PY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1Ztc_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__u__Y3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1JchQ\"};","import { useEffect, useRef } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api'\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner'\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error} = useHttp(addComment)\n\n  const { onAddedComment } = props\n\n  useEffect(()=>{\n    if(status === 'completed'){\n      onAddedComment()\n    }\n  },[status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value\n\n    // optional: Could validate here\n\n    sendRequest({\n      commentData: {\n        text: enteredText\n      },\n      quoteId: props.quoteId})\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api'\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams()\n\n  const { quoteId } = params\n  const  {sendRequest, status, data: loadedComments} = useHttp(getAllComments)\n\n  useEffect(()=>{\n    sendRequest(quoteId)\n  },[sendRequest, quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() =>{\n    sendRequest(quoteId)\n  },[sendRequest, quoteId])\n\n  let comments;\n\n  if(status === 'pending'){\n    comments =\n      <div className='centered'>\n          <LoadingSpinner />\n      </div>\n  }\n\n  if(status === 'completed' && (loadedComments && loadedComments.length > 0)){\n    comments = <CommentsList comments={loadedComments} />\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)){\n    comments = <p className='centered'>No comments were added yet!</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm \n          onAddedComment={addedCommentHandler} \n          quoteId={quoteId} \n        />)\n      }\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\"\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\"\r\nimport  Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\"\r\nimport useHttp from \"../hooks/use-http\"\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nconst QuoteDetail = () =>{\r\n    const match = useRouteMatch()\r\n    const params = useParams()\r\n\r\n    const { quoteId } = params\r\n\r\n    const { sendRequest, status, data: loadedQuote, error} = useHttp(getSingleQuote, true)\r\n\r\n    useEffect(()=>{\r\n        sendRequest(quoteId)\r\n    },[sendRequest, quoteId])\r\n\r\n    if(status === 'pending'){\r\n        return (\r\n            <div className='centered'>\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if(error){\r\n        return (\r\n            <p className='centered'>\r\n                {error}\r\n            </p>\r\n        )\r\n    }\r\n\r\n    if(!loadedQuote.text){\r\n        return <p> No Quote Found</p>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            <Route path={match.path} exact>\r\n                <div className='centered'>\r\n                    <Link \r\n                        className='btn--flat' \r\n                        to={`${match.url}/comments`}\r\n                    >\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n            <Route \r\n                path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail"],"sourceRoot":""}